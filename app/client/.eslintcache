[{"/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Checkout/Checkout.js":"1","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/Cart.js":"2","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Dashboard/Dashboard.js":"3","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/ShippingDetails.js":"4","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/CartStyles.js":"5"},{"size":2363,"mtime":1610446910752,"results":"6","hashOfConfig":"7"},{"size":1471,"mtime":1610447010230,"results":"8","hashOfConfig":"7"},{"size":5294,"mtime":1610443415275,"results":"9","hashOfConfig":"7"},{"size":6463,"mtime":1610445059374,"results":"10","hashOfConfig":"7"},{"size":607,"mtime":1610445672568,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1yknslg",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Checkout/Checkout.js",["25"],"/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/Cart.js",["26"],"import React, { useContext } from \"react\";\nimport useStyles from \"./CartStyles\";\nimport CartItem from \"./CartItem\";\nimport { Box, Container } from \"@material-ui/core\";\nimport CartTotals from \"./CartTotals\";\nimport CartContext from \"../../context/CartContext\";\nimport Checkout from \"../Checkout/Checkout\";\nimport ShippingDetails from \"./ShippingDetails\";\n\nexport default function SignUp() {\n  const classes = useStyles();\n\n  const context = useContext(CartContext);\n\n  const handleShippingSubmit = () => {};\n\n  return (\n    <div className={classes.cartContainer}>\n      <h1 className={classes.pageTitle}>your cart</h1>\n      <div className={classes.cartInfoBox}>\n        <div\n          //TODO move inline styles out\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            border: \"2px solid red\",\n          }}\n        >\n          {context.cart.length <= 0 && (\n            <p style={{ color: \"white\", fontSize: \"1rem\" }}>\n              No Items in the Cart\n            </p>\n          )}\n          {context.cart.map((cartItem) => {\n            return <CartItem key={cartItem.discogs_id} cartItem={cartItem} />;\n          })}\n        </div>\n        <Container\n          style={{\n            padding: 0,\n            backgroundColor: \"EEE\",\n          }}\n        >\n          <CartTotals />\n          <ShippingDetails onSubmit={handleShippingSubmit} />\n          <Checkout></Checkout>\n        </Container>\n      </div>\n    </div>\n  );\n}\n","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Dashboard/Dashboard.js",["27","28","29","30","31","32","33"],"import { Box, Container, Fade, makeStyles } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport theme from \"../../components/App/theme\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\nimport { API } from \"../../util/fetch\";\n\nconst useStyles = makeStyles((theme) => {\n  const {\n    palette: { light, primary, secondary },\n    breakpoints,\n  } = theme;\n  return {\n    dashboardContainer: {\n      width: \"100%\",\n      border: \"2px solid black\",\n    },\n    formContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n    },\n    formInput: {\n      fontSize: \"1rem\",\n    },\n    formGroup: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"flex-start\",\n      margin: \"1rem\",\n    },\n    submitButton: {\n      border: \"1px solid black\",\n      margin: \"0rem 1rem 1rem\",\n      color: secondary.main,\n      padding: \"0.5rem 1rem\",\n      backgroundColor: primary.main,\n      fontSize: \"1rem\",\n    },\n    formLabel: { fontSize: \"1rem\", color: secondary.main },\n    errorMessage: { color: \"#ed2e38\" },\n    formTitle: {},\n    successfulSubmit: {\n      padding: \"0.5rem, 2rem\",\n      backgroundColor: light.main,\n      color: secondary.main,\n      border: `2px solid ${secondary.main}`,\n    },\n  };\n});\n\nexport default function Dashboard() {\n  const classes = useStyles();\n\n  const { register, handleSubmit, errors, setError, reset } = useForm();\n  const [successfulSubmit, setSuccessfulSubmit] = useState(false);\n\n  const showSuccessfulSubmit = () => {\n    setSuccessfulSubmit(true);\n    setTimeout(() => {\n      setSuccessfulSubmit(false);\n    }, 1000);\n  };\n\n  const submitAddRecord = async (recordInfo) => {\n    console.log(recordInfo);\n    recordInfo.preloved === \"true\"\n      ? (recordInfo.preloved = true)\n      : (recordInfo.preloved = false);\n    recordInfo.price = parseInt(recordInfo.price);\n\n    try {\n      const { data } = await API.post(\"/shop/add\", recordInfo);\n      console.log(data);\n      showSuccessfulSubmit();\n      reset();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log(successfulSubmit);\n\n  return (\n    <div>\n      <div className={classes.dashboardContainer}>\n        <div className={classes.formContainer}>\n          <h3 className={classes.formTitle}>Add Record</h3>\n          <form onSubmit={handleSubmit(submitAddRecord)} id=\"addRecordForm\">\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"release_id\">\n                discogs release id\n              </label>\n              <input\n                ref={register({ required: true })}\n                className={classes.formInput}\n                type=\"text\"\n                name=\"release_id\"\n              />\n              {errors.release_id && errors.release_id.type === \"required\" && (\n                <p className={classes.errorMessage}>This is required</p>\n              )}\n            </div>\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"preloved\">\n                condition\n              </label>\n              <select name=\"preloved\" ref={register({ required: true })}>\n                <option value=\"false\">New</option>\n                <option value=\"true\">Preloved</option>\n              </select>\n\n              {errors.price && errors.price.type === \"required\" && (\n                <p className={classes.errorMessage}>This is required</p>\n              )}\n            </div>\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"price\">\n                price\n              </label>\n              <input\n                ref={register({ required: true })}\n                type=\"text\"\n                name=\"price\"\n                className={classes.formInput}\n              />\n              {errors.price && errors.price.type === \"required\" && (\n                <p className={classes.errorMessage}>This is required</p>\n              )}\n            </div>\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"description\">\n                description\n              </label>\n              <textarea\n                ref={register({ required: false })}\n                className={classes.formInput}\n                type=\"text\"\n                name=\"description\"\n                row={5}\n              />\n            </div>\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"review\">\n                review\n              </label>\n              <textarea\n                ref={register({ required: false })}\n                className={classes.formInput}\n                type=\"text\"\n                name=\"review\"\n                row={3}\n              />\n            </div>\n            {successfulSubmit && (\n              <p className={classes.successfulSubmit}>\n                Record Submitted Successfully\n              </p>\n            )}\n            <input\n              className={classes.submitButton}\n              type=\"submit\"\n              value=\"Add Record\"\n              name=\"submit\"\n            />\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/ShippingDetails.js",["34","35","36","37","38","39","40","41","42","43"],"import { Box, Container, Fade, makeStyles } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport theme from \"../../components/App/theme\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\nimport { API } from \"../../util/fetch\";\n\nconst useStyles = makeStyles((theme) => {\n  const {\n    palette: { light, primary, secondary },\n    breakpoints,\n  } = theme;\n  return {\n    dashboardContainer: {\n      width: \"100%\",\n      border: \"2px solid black\",\n    },\n    formContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      backgroundColor: primary.main,\n    },\n    formInput: {\n      fontSize: \"1rem\",\n    },\n    formGroup: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"flex-start\",\n      margin: \"1rem\",\n    },\n    submitButton: {\n      border: \"1px solid black\",\n      margin: \"0rem 1rem 1rem\",\n      color: secondary.main,\n      padding: \"0.5rem 1rem\",\n      backgroundColor: primary.main,\n      fontSize: \"1rem\",\n    },\n    formLabel: { fontSize: \"1rem\", color: secondary.main },\n    errorMessage: { color: \"#ed2e38\" },\n    formTitle: {},\n    successfulSubmit: {\n      padding: \"0.5rem, 2rem\",\n      backgroundColor: light.main,\n      color: secondary.main,\n      border: `2px solid ${secondary.main}`,\n    },\n  };\n});\n\nexport default function ShippingDetails(props) {\n  const classes = useStyles();\n\n  const { register, handleSubmit, errors, setError, reset } = useForm();\n  const [successfulSubmit, setSuccessfulSubmit] = useState(false);\n  return (\n    <div>\n      <div className={classes.formContainer}>\n        <h3 className={classes.formTitle}>Shipping Details</h3>\n        <form onSubmit={handleSubmit(props.onSubmit())} id=\"shippingDetails\">\n          <div className={classes.formGroup}>\n            <label className={classes.formLabel} htmlFor=\"first_name\">\n              first name\n            </label>\n            <input\n              ref={register({ required: true })}\n              className={classes.formInput}\n              type=\"text\"\n              name=\"first_name\"\n            />\n            {errors.release_id && errors.release_id.type === \"required\" && (\n              <p className={classes.errorMessage}>This is required</p>\n            )}\n          </div>\n          <div className={classes.formGroup}>\n            <label className={classes.formLabel} htmlFor=\"last_name\">\n              last name\n            </label>\n            <input\n              ref={register({ required: true })}\n              className={classes.formInput}\n              type=\"text\"\n              name=\"last_name\"\n            />\n            {errors.release_id && errors.release_id.type === \"required\" && (\n              <p className={classes.errorMessage}>This is required</p>\n            )}\n          </div>\n          <div className={classes.formGroup}>\n            <label className={classes.formLabel} htmlFor=\"addressLine1\">\n              address line 1\n            </label>\n            <input\n              ref={register({ required: true })}\n              className={classes.formInput}\n              type=\"text\"\n              name=\"addressLine1\"\n            />\n            {errors.release_id && errors.release_id.type === \"required\" && (\n              <p className={classes.errorMessage}>This is required</p>\n            )}\n          </div>\n\n          <div className={classes.formGroup}>\n            <label className={classes.formLabel} htmlFor=\"locality\">\n              city\n            </label>\n            <input\n              ref={register({ required: true })}\n              className={classes.formInput}\n              type=\"text\"\n              name=\"locality\"\n            />\n            {errors.release_id && errors.release_id.type === \"required\" && (\n              <p className={classes.errorMessage}>This is required</p>\n            )}\n          </div>\n\n          <div className={classes.formGroup}>\n            <label\n              className={classes.formLabel}\n              htmlFor=\"administrative_district_level_1\"\n            >\n              state\n            </label>\n            <input\n              ref={register({ required: true })}\n              className={classes.formInput}\n              type=\"text\"\n              name=\"administrative_district_level_1\"\n            />\n            {errors.release_id && errors.release_id.type === \"required\" && (\n              <p className={classes.errorMessage}>This is required</p>\n            )}\n          </div>\n\n          <div className={classes.formGroup}>\n            <label className={classes.formLabel} htmlFor=\"country\">\n              country\n            </label>\n            <input\n              ref={register({ required: true })}\n              className={classes.formInput}\n              type=\"text\"\n              name=\"country\"\n            />\n            {errors.release_id && errors.release_id.type === \"required\" && (\n              <p className={classes.errorMessage}>This is required</p>\n            )}\n          </div>\n\n          <div className={classes.formGroup}>\n            <label className={classes.formLabel} htmlFor=\"postcode\">\n              postcode\n            </label>\n            <input\n              ref={register({ required: true })}\n              className={classes.formInput}\n              type=\"text\"\n              name=\"postcode\"\n            />\n            {errors.release_id && errors.release_id.type === \"required\" && (\n              <p className={classes.errorMessage}>This is required</p>\n            )}\n          </div>\n\n          <div className={classes.formGroup}>\n            <label className={classes.formLabel} htmlFor=\"phone_number\">\n              phone number\n            </label>\n            <input\n              ref={register({ required: true })}\n              className={classes.formInput}\n              type=\"text\"\n              name=\"phone_number\"\n            />\n            {errors.release_id && errors.release_id.type === \"required\" && (\n              <p className={classes.errorMessage}>This is required</p>\n            )}\n          </div>\n          {successfulSubmit && (\n            <p className={classes.successfulSubmit}>\n              Record Submitted Successfully\n            </p>\n          )}\n          <input\n            className={classes.submitButton}\n            type=\"submit\"\n            value=\"Add Shipping Details\"\n            name=\"submit\"\n          />\n        </form>\n      </div>\n    </div>\n  );\n}\n","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/CartStyles.js",[],{"ruleId":"44","severity":1,"message":"45","line":54,"column":13,"nodeType":"46","messageId":"47","endLine":54,"endColumn":20},{"ruleId":"44","severity":1,"message":"48","line":4,"column":10,"nodeType":"46","messageId":"47","endLine":4,"endColumn":13},{"ruleId":"44","severity":1,"message":"48","line":1,"column":10,"nodeType":"46","messageId":"47","endLine":1,"endColumn":13},{"ruleId":"44","severity":1,"message":"49","line":1,"column":15,"nodeType":"46","messageId":"47","endLine":1,"endColumn":24},{"ruleId":"44","severity":1,"message":"50","line":1,"column":26,"nodeType":"46","messageId":"47","endLine":1,"endColumn":30},{"ruleId":"44","severity":1,"message":"51","line":3,"column":8,"nodeType":"46","messageId":"47","endLine":3,"endColumn":13},{"ruleId":"44","severity":1,"message":"52","line":5,"column":8,"nodeType":"46","messageId":"47","endLine":5,"endColumn":13},{"ruleId":"44","severity":1,"message":"53","line":11,"column":5,"nodeType":"46","messageId":"47","endLine":11,"endColumn":16},{"ruleId":"44","severity":1,"message":"54","line":56,"column":43,"nodeType":"46","messageId":"47","endLine":56,"endColumn":51},{"ruleId":"44","severity":1,"message":"48","line":1,"column":10,"nodeType":"46","messageId":"47","endLine":1,"endColumn":13},{"ruleId":"44","severity":1,"message":"49","line":1,"column":15,"nodeType":"46","messageId":"47","endLine":1,"endColumn":24},{"ruleId":"44","severity":1,"message":"50","line":1,"column":26,"nodeType":"46","messageId":"47","endLine":1,"endColumn":30},{"ruleId":"44","severity":1,"message":"51","line":3,"column":8,"nodeType":"46","messageId":"47","endLine":3,"endColumn":13},{"ruleId":"44","severity":1,"message":"52","line":5,"column":8,"nodeType":"46","messageId":"47","endLine":5,"endColumn":13},{"ruleId":"44","severity":1,"message":"55","line":6,"column":10,"nodeType":"46","messageId":"47","endLine":6,"endColumn":13},{"ruleId":"44","severity":1,"message":"53","line":11,"column":5,"nodeType":"46","messageId":"47","endLine":11,"endColumn":16},{"ruleId":"44","severity":1,"message":"54","line":57,"column":43,"nodeType":"46","messageId":"47","endLine":57,"endColumn":51},{"ruleId":"44","severity":1,"message":"56","line":57,"column":53,"nodeType":"46","messageId":"47","endLine":57,"endColumn":58},{"ruleId":"44","severity":1,"message":"57","line":58,"column":28,"nodeType":"46","messageId":"47","endLine":58,"endColumn":47},"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","'Box' is defined but never used.","'Container' is defined but never used.","'Fade' is defined but never used.","'theme' is defined but never used.","'axios' is defined but never used.","'breakpoints' is assigned a value but never used.","'setError' is assigned a value but never used.","'API' is defined but never used.","'reset' is assigned a value but never used.","'setSuccessfulSubmit' is assigned a value but never used."]