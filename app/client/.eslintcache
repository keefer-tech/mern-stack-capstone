[{"/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/Cart.js":"1","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/CartTotals.js":"2","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/CartItem.js":"3","/Users/macbook/Documents/mern-stack-capstone/app/client/src/components/App/App.js":"4","/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Dashboard/Dashboard.js":"5","/Users/macbook/Documents/mern-stack-capstone/app/client/src/components/RecordCard/RecordCard.js":"6"},{"size":1166,"mtime":1610436807157,"results":"7","hashOfConfig":"8"},{"size":2261,"mtime":1610436851316,"results":"9","hashOfConfig":"8"},{"size":5319,"mtime":1610440418088,"results":"10","hashOfConfig":"8"},{"size":2117,"mtime":1610436927046,"results":"11","hashOfConfig":"8"},{"size":5306,"mtime":1610442364807,"results":"12","hashOfConfig":"8"},{"size":3760,"mtime":1610439112059,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yknslg",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/Cart.js",[],"/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/CartTotals.js",[],"/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Cart/CartItem.js",["29","30","31"],"import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport {\n  Button,\n  CardContent,\n  CardMedia,\n  IconButton,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport CartContext from \"../../context/CartContext\";\n\nconst useStyles = makeStyles((theme) => {\n  const {\n    breakpoints,\n    palette: { secondary, primary },\n  } = theme;\n  return {\n    card: {\n      display: \"flex\",\n      position: \"relative\",\n      height: \"10vw\",\n      width: \"40vw\",\n      borderRadius: 0,\n      backgroundColor: primary.main,\n      [breakpoints.down(\"sm\")]: {\n        height: \"20vw\",\n        width: \"100%\",\n      },\n    },\n    details: {\n      display: \"flex\",\n      width: \"100%\",\n      position: \"relative\",\n    },\n    content: {\n      display: \"flex\",\n      width: \"100%\",\n      padding: \"0.5rem\",\n      position: \"relative\",\n      justifyContent: \"space-between\",\n    },\n    coverImage: {\n      width: \"10vw\",\n      height: \"100%\",\n      [breakpoints.down(\"sm\")]: {\n        width: \"20vw\",\n      },\n    },\n    flexedColumn: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n      fontSize: \"1.5rem\",\n    },\n    leftColumn: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n    },\n    artistName: {\n      fontSize: \"1rem\",\n      textAlign: \"left\",\n    },\n    recordTitle: {\n      fontSize: \"0.8rem\",\n      fontWeight: \"200\",\n    },\n    recordPrice: {\n      fontSize: \"1.5rem\",\n      textAlign: \"right\",\n      [breakpoints.only(\"xs\")]: {\n        fontSize: \"1rem\",\n      },\n    },\n    removeItem: {\n      textAlign: \"right\",\n      fontSize: \"0.8rem\",\n      cursor: \"pointer\",\n    },\n    quantityContainer: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      color: secondary.main,\n      fontSize: \"1rem\",\n      padding: 0,\n      [breakpoints.only(\"xs\")]: {\n        flexDirection: \"column\",\n      },\n    },\n    quantityIcons: {\n      fontSize: \"1rem\",\n      [breakpoints.only(\"xs\")]: {},\n      padding: 0,\n      margin: 0,\n    },\n    cardMediaWrapper: {\n      height: \"100%\",\n      width: \"10vw\",\n      [breakpoints.down(\"sm\")]: {\n        width: \"20vw\",\n      },\n    },\n  };\n});\n\nexport default function CartItem(props) {\n  const classes = useStyles();\n\n  const { cartItem } = props;\n  console.log({ cartItem });\n\n\n  const [quantity, setQuantity] = useState(1);\n  const {\n    artists_sort: artistName,\n    release_title: recordTitle,\n    variations: {\n      stock: { price: recordPrice },\n    },\n    image: coverImage,\n  } = cartItem;\n\n  // const handleIncrement = () => {\n  //   setQuantity(quantity + 1);\n  // };\n  // const handleDecrement = () => {\n  //   if (quantity > 0) {\n  //     setQuantity(quantity - 1);\n  //   }\n  // };\n\n  return (\n    <CartContext.Consumer>\n      {(context) => (\n        <Card className={classes.card}>\n          <div className={classes.cardMediaWrapper}>\n            <CardMedia\n              image={coverImage}\n              className={classes.coverImage}\n              title=\"placeholder\"\n            ></CardMedia>\n          </div>\n          <div className={classes.details}>\n            <CardContent className={classes.content}>\n              <div className={classes.leftColumn}>\n                <Typography className={classes.artistName}>\n                  {artistName}\n                </Typography>\n                <Typography className={classes.recordTitle}>\n                  {recordTitle}\n                </Typography>\n              </div>\n              <div className={classes.flexedColumn}>\n                <div\n                  className={classes.quantityContainer}\n                  style={{ padding: 0 }}\n                >\n                  <IconButton\n                    onClick={() => context.addToCart(cartItem)}\n                    style={{ height: \"1rem\" }}\n                  >\n                    <AddIcon className={classes.quantityIcons} />\n                  </IconButton>\n                  <h3 className={classes.quantityIcons}>{cartItem.quantity}</h3>\n                  {cartItem.quantity > 1 ? (\n                    <IconButton\n                      onClick={() => context.removeFromCart(cartItem)}\n                      style={{ height: \"1rem\" }}\n                    >\n                      <RemoveIcon className={classes.quantityIcons} />\n                    </IconButton>\n                  ) : (\n                    <IconButton style={{ height: \"1rem\" }} disabled={true}>\n                      <RemoveIcon className={classes.quantityIcons} />\n                    </IconButton>\n                  )}\n                </div>\n              </div>\n              <div className={classes.flexedColumn}>\n                <Typography className={classes.recordPrice}>\n                  ${((recordPrice / 100.0) * cartItem.quantity).toFixed(2)}\n                </Typography>\n                <Typography\n                  className={classes.removeItem}\n                  onClick={() => context.removeFromCart(cartItem)}\n                >\n                  Remove Item\n                </Typography>\n              </div>\n            </CardContent>\n          </div>\n        </Card>\n      )}\n    </CartContext.Consumer>\n  );\n}\n","/Users/macbook/Documents/mern-stack-capstone/app/client/src/components/App/App.js",[],"/Users/macbook/Documents/mern-stack-capstone/app/client/src/pages/Dashboard/Dashboard.js",["32","33","34","35","36","37","38"],"import { Box, Container, Fade, makeStyles } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport theme from \"../../components/App/theme\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\nimport { API } from \"../../util/fetch\";\n\nconst useStyles = makeStyles((theme) => {\n  const {\n    palette: { light, primary, secondary },\n    breakpoints,\n  } = theme;\n  return {\n    dashboardContainer: {\n      width: \"100%\",\n      border: \"2px solid black\",\n    },\n    formContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n    },\n    formInput: {\n      fontSize: \"1rem\",\n    },\n    formGroup: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"flex-start\",\n      margin: \"1rem\",\n    },\n    submitButton: {\n      border: \"1px solid black\",\n      margin: \"0rem 1rem 1rem\",\n      color: secondary.main,\n      padding: \"0.5rem 1rem\",\n      backgroundColor: primary.main,\n      fontSize: \"1rem\",\n    },\n    formLabel: { fontSize: \"1rem\", color: secondary.main },\n    errorMessage: { color: \"#ed2e38\" },\n    formTitle: {},\n    successfulSubmit: {\n      padding: \"0.5rem, 2rem\",\n      backgroundColor: light.main,\n      color: secondary.main,\n      border: `2px solid ${secondary.main}`,\n    },\n  };\n});\n\nexport default function Dashboard() {\n  const classes = useStyles();\n\n  const { register, handleSubmit, errors, setError, reset } = useForm();\n  const [successfulSubmit, setSuccessfulSubmit] = useState(false);\n\n  const submitAddRecord = async (recordInfo) => {\n    console.log(recordInfo);\n    recordInfo.preloved === \"true\"\n      ? (recordInfo.preloved = true)\n      : (recordInfo.preloved = false);\n    recordInfo.price = parseInt(recordInfo.price);\n\n    const showSuccessfulSubmit = () => {\n      setSuccessfulSubmit(true);\n      setTimeout(() => {\n        setSuccessfulSubmit(false);\n      }, 1000);\n    };\n\n    try {\n      const { data } = await API.post(\"/shop/add\", recordInfo);\n      console.log(data);\n      showSuccessfulSubmit();\n      reset();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log(successfulSubmit);\n\n  return (\n    <div>\n      <div className={classes.dashboardContainer}>\n        <div className={classes.formContainer}>\n          <h3 className={classes.formTitle}>Add Record</h3>\n          <form onSubmit={handleSubmit(submitAddRecord)} id=\"addRecordForm\">\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"release_id\">\n                discogs release id\n              </label>\n              <input\n                ref={register({ required: true })}\n                className={classes.formInput}\n                type=\"text\"\n                name=\"release_id\"\n              />\n              {errors.release_id && errors.release_id.type === \"required\" && (\n                <p className={classes.errorMessage}>This is required</p>\n              )}\n            </div>\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"preloved\">\n                condition\n              </label>\n              <select name=\"preloved\" ref={register({ required: true })}>\n                <option value=\"false\">New</option>\n                <option value=\"true\">Preloved</option>\n              </select>\n\n              {errors.price && errors.price.type === \"required\" && (\n                <p className={classes.errorMessage}>This is required</p>\n              )}\n            </div>\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"price\">\n                price\n              </label>\n              <input\n                ref={register({ required: true })}\n                type=\"text\"\n                name=\"price\"\n                className={classes.formInput}\n              />\n              {errors.price && errors.price.type === \"required\" && (\n                <p className={classes.errorMessage}>This is required</p>\n              )}\n            </div>\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"description\">\n                description\n              </label>\n              <textarea\n                ref={register({ required: false })}\n                className={classes.formInput}\n                type=\"text\"\n                name=\"description\"\n                row={5}\n              />\n            </div>\n            <div className={classes.formGroup}>\n              <label className={classes.formLabel} htmlFor=\"review\">\n                review\n              </label>\n              <textarea\n                ref={register({ required: false })}\n                className={classes.formInput}\n                type=\"text\"\n                name=\"review\"\n                row={3}\n              />\n            </div>\n            {successfulSubmit && (\n              <p className={classes.successfulSubmit}>\n                Record Submitted Successfully\n              </p>\n            )}\n            <input\n              className={classes.submitButton}\n              type=\"submit\"\n              value=\"Add Record\"\n              name=\"submit\"\n            />\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/macbook/Documents/mern-stack-capstone/app/client/src/components/RecordCard/RecordCard.js",["39"],"import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport { Box, CardContent, IconButton, Typography } from \"@material-ui/core\";\nimport useStyles from \"./RecordCardStyles\";\nimport CartIcon from \"../../icons/BoxFullDark\";\nimport CartContext from \"../../context/CartContext\";\nimport { toCurrencyString } from \"../../util/currency\";\n\nexport default function RecordCard(props) {\n  const classes = useStyles();\n\n  const {\n    release_title: releaseTitle,\n    artists_sort: artist,\n    genres,\n    image,\n    preloved,\n    labels,\n    year,\n    description,\n    variations: {\n      stock: { price },\n    },\n  } = props.record;\n\n  const [blur, setBlur] = useState(\"blur(0px)\");\n  const [display, setDisplay] = useState(\"none\");\n\n  const handleHover = (blurState, displayState) => {\n    if (description.length > 0) {\n      setBlur(blurState);\n\n      setTimeout(() => {\n        setDisplay(displayState);\n      }, 300);\n    }\n  };\n\n  const parseLabelData = (labels) => {\n    if (labels.length < 1) {\n      return \"Year\";\n    } else {\n      return labels[0].name;\n    }\n  };\n\n  return (\n    <CartContext.Consumer>\n      {(context) => (\n        <Card className={classes.root} raised>\n          <Box\n            onMouseEnter={() => handleHover(\"blur(4px)\", \"block\")}\n            onMouseLeave={() => handleHover(\"blur(0px)\", \"none\")}\n            style={{ position: \"relative\" }}\n          >\n            <img\n              alt=\"record cover\"\n              src={image}\n              className={classes.coverImage}\n              style={{\n                filter: blur,\n                transition: \"0.5s filter\",\n              }}\n            />\n\n            {blur && (\n              <p\n                className={classes.recordDescription}\n                style={{\n                  display: display,\n                }}\n              >\n                {description}\n              </p>\n            )}\n          </Box>\n          <CardContent style={{ position: \"relative\", padding: \"2px\" }}>\n            <div className={classes.flexedRow}>\n              <Typography className={classes.artistName}>{artist}</Typography>\n              <Typography className={classes.recordPrice}>\n                ${toCurrencyString(price)}\n              </Typography>\n            </div>\n            <div className={classes.flexedRow}>\n              <Typography className={classes.recordTitle}>\n                {releaseTitle}\n              </Typography>\n            </div>\n            <div className={classes.flexedRow}>\n              <Typography className={classes.labelAndYear}>\n                {parseLabelData(labels)} • {year}\n              </Typography>\n            </div>\n            <div className={classes.flexedRow}>\n              <Typography className={classes.cardGenres}>\n                {genres === 1\n                  ? genres[0]\n                  : genres.map((genre, index) => {\n                      return index === genres.length - 1\n                        ? genre\n                        : `${genre} / `;\n                    })}\n              </Typography>\n            </div>\n            <IconButton\n              edge=\"end\"\n              style={{\n                position: \"absolute\",\n                bottom: -4,\n                right: 8,\n              }}\n              onClick={() => context.addToCart(props.record)}\n            >\n              <div className={classes.iconContainer}>\n                <span className={classes.addIcon}>ADD</span>\n                <CartIcon\n                  className={classes.cartIcon}\n                  color=\"secondary\"\n                  viewBox=\"0 0 60 60\"\n                />\n              </div>\n            </IconButton>\n          </CardContent>\n        </Card>\n      )}\n    </CartContext.Consumer>\n  );\n}\n",{"ruleId":"40","severity":1,"message":"41","line":4,"column":3,"nodeType":"42","messageId":"43","endLine":4,"endColumn":9},{"ruleId":"40","severity":1,"message":"44","line":117,"column":10,"nodeType":"42","messageId":"43","endLine":117,"endColumn":18},{"ruleId":"40","severity":1,"message":"45","line":117,"column":20,"nodeType":"42","messageId":"43","endLine":117,"endColumn":31},{"ruleId":"40","severity":1,"message":"46","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":13},{"ruleId":"40","severity":1,"message":"47","line":1,"column":15,"nodeType":"42","messageId":"43","endLine":1,"endColumn":24},{"ruleId":"40","severity":1,"message":"48","line":1,"column":26,"nodeType":"42","messageId":"43","endLine":1,"endColumn":30},{"ruleId":"40","severity":1,"message":"49","line":3,"column":8,"nodeType":"42","messageId":"43","endLine":3,"endColumn":13},{"ruleId":"40","severity":1,"message":"50","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":13},{"ruleId":"40","severity":1,"message":"51","line":11,"column":5,"nodeType":"42","messageId":"43","endLine":11,"endColumn":16},{"ruleId":"40","severity":1,"message":"52","line":56,"column":43,"nodeType":"42","messageId":"43","endLine":56,"endColumn":51},{"ruleId":"40","severity":1,"message":"53","line":17,"column":5,"nodeType":"42","messageId":"43","endLine":17,"endColumn":13},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'quantity' is assigned a value but never used.","'setQuantity' is assigned a value but never used.","'Box' is defined but never used.","'Container' is defined but never used.","'Fade' is defined but never used.","'theme' is defined but never used.","'axios' is defined but never used.","'breakpoints' is assigned a value but never used.","'setError' is assigned a value but never used.","'preloved' is assigned a value but never used."]